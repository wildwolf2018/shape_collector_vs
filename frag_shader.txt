#version 400
in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

out vec4 color;

struct Light{
	vec3 position;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct Material{
	sampler2D diffuseMap;
	vec3 specular;
	float shininess;
};

uniform Light light;
uniform Material material;
uniform vec3 viewPos;

void main()
{ 
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(-light.position);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 ambient = light.ambient * vec3(texture(material.diffuseMap, TexCoords));
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuseMap, TexCoords));
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 halfWay = normalize(lightDir + viewDir);
	float spec = pow(max(dot(halfWay, norm), 0.0), material.shininess);
	vec3 specular = light.specular * material.specular * spec;
	vec4 fragColor = vec4( ambient + diffuse + specular, 1.0);
	float gamma = 2.2;
	color =  vec4(pow(fragColor.rgb, vec3(1.0/gamma)), 1.0); 
}
