#version 400

out vec4 FragColor;

in VS_OUT 
{ 
	vec3 FragPos; 
	vec3 Normal; 
	vec2 TexCoords; 
	vec4 FragPosLightSpace; 
} fs_in;

uniform sampler2D diffuseTexture;
uniform sampler2D shadowMap;

uniform vec3 viewPos;
uniform vec3 lightPos;

float ShadowCalculation(vec4 fragPosLightSpace, vec3 normal, vec3 lightDir) 
{ 
	// perform perspective divide 
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w; 
	// Transform to [0,1] range 
	projCoords = projCoords * 0.5 + 0.5; 
	// Get closest depth value from light’s perspective (using [0,1] range fragPosLight as coords) 
	float closestDepth = texture(shadowMap, projCoords.xy).r; 
	// Get depth of current fragment from light’s perspective 
	float currentDepth = projCoords.z; 
	// Check whether current frag pos is in shadow 
	float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.01);
	float shadow = 0.0; 
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0); 
	for(int x = -3; x <= 3; ++x) 
	{ 
		for(int y = -3; y <= 3; ++y) { 
			float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0; 
		} 
	} 
	shadow /= 49.0;
	return shadow;
}
void main()
{
	vec3 color = texture(diffuseTexture, fs_in.TexCoords).rgb; 
	vec3 norm = normalize(fs_in.Normal);
	vec3 lightDir = normalize(lightPos - fs_in.FragPos);
	float diff = max(dot(lightDir, norm), 0.0);
	vec3 lightColor = vec3(1.0);
	vec3 ambient = 0.08 * color;
	vec3 diffuse =  diff *  lightColor;
	vec3 viewDir = normalize(viewPos - fs_in.FragPos);
	vec3 reflectDir = reflect(-lightDir, norm); 
	vec3 halfWay = normalize(lightDir + viewDir);
	float spec = pow(max(dot(halfWay, norm), 0.0), 32.0);
	vec3 specular = spec * lightColor;
	// Calculate shadow 
	float shadow = ShadowCalculation(fs_in.FragPosLightSpace, norm, lightDir);
	vec3 lighting = (ambient +  (1.0 - shadow) * (diffuse + specular)) * color ;
	float gamma = 2.2;
	FragColor = vec4(lighting, 1.0f);
}
