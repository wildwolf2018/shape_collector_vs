#version 400

in VS_OUT 
{ 
	vec3 FragPos; 
	vec3 Normal;  
} 
fs_in;

out vec4 color;

struct Light{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
struct Material{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

uniform Material material;
uniform vec3 viewPos;
uniform Light light;

void main()
{
	vec3 norm = normalize(fs_in.Normal);
	vec3 lightDir = normalize(-light.position);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 lightColor = vec3(1.0);
	vec3 ambient = light.ambient * material.ambient;
	vec3 diffuse =   light.diffuse  * diff * material.diffuse;
	vec3 viewDir = normalize(viewPos - fs_in.FragPos);
	vec3 halfWay = normalize(lightDir + viewDir);
	float spec = pow(max(dot(halfWay, norm), 0.0), material.shininess);
	vec3 specular = light.specular * material.specular * spec;
	// Calculate shadow 
	//float shadow = ShadowCalculation(fs_in.FragPosLightSpace, norm, lightDir);
	vec3 lighting = ambient +  diffuse + specular ;
	float gamma = 2.2;
	color.rgb =  pow(lighting.rgb, vec3(1.0/gamma));
}
